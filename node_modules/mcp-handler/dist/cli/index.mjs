#!/usr/bin/env node
import { __commonJS, __async } from '../chunk-FF57VHLH.mjs';
import { Command } from 'commander';
import fs from 'fs/promises';
import path from 'path';
import chalk from 'chalk';

var require_cli = __commonJS({
  "src/cli/index.ts"() {
    var program = new Command();
    var ROUTE_TEMPLATE = `import { createMcpHandler } from 'mcp-handler';
import { z } from 'zod';

const handler = createMcpHandler(
  server => {
    server.tool(
      'roll_dice',
      'Rolls an N-sided die',
      { 
        sides: z.number().int().min(2)
      },
      async ({ sides }) => {
        const value = 1 + Math.floor(Math.random() * sides);
        return {
          content: [{ type: 'text', text: \`\u{1F3B2} You rolled a \${value}!\` }],
        };
      }
    );
  },
  {
    // Optional server options
  },
  {
    // Optional redis config
    redisUrl: process.env.REDIS_URL,
    // You need these endpoints
    basePath: '/api',
    maxDuration: 60,
    verboseLogs: true,
  }
);

export { handler as GET, handler as POST };
`;
    function detectPackageManager() {
      return __async(this, null, function* () {
        const cwd = process.cwd();
        try {
          const files = yield fs.readdir(cwd);
          if (files.includes("bun.lockb"))
            return "bun";
          if (files.includes("pnpm-lock.yaml"))
            return "pnpm";
          if (files.includes("yarn.lock"))
            return "yarn";
          if (files.includes("package-lock.json"))
            return "npm";
          return "npm";
        } catch (error) {
          return "npm";
        }
      });
    }
    function installDependencies(packageManager) {
      return __async(this, null, function* () {
        const execSync = (yield import('child_process')).execSync;
        const dependencies = ["mcp-handler", "zod"];
        const commands = {
          npm: `npm install ${dependencies.join(" ")}`,
          pnpm: `pnpm add ${dependencies.join(" ")}`,
          yarn: `yarn add ${dependencies.join(" ")}`,
          bun: `bun add ${dependencies.join(" ")}`
        };
        try {
          console.log(
            chalk.blue(`
Installing dependencies using ${packageManager}...`)
          );
          execSync(commands[packageManager], { stdio: "inherit" });
          console.log(chalk.green("\n\u2705 Dependencies installed successfully!"));
        } catch (error) {
          console.error(
            chalk.red(
              "\n\u274C Failed to install dependencies. You can install them manually:"
            )
          );
          console.log(chalk.yellow(`
${commands[packageManager]}`));
        }
      });
    }
    function init() {
      return __async(this, null, function* () {
        var _a, _b;
        try {
          const packageJson = JSON.parse(
            yield fs.readFile(path.join(process.cwd(), "package.json"), "utf-8")
          );
          if (!((_a = packageJson.dependencies) == null ? void 0 : _a.next) && !((_b = packageJson.devDependencies) == null ? void 0 : _b.next)) {
            console.error(
              chalk.red("\u274C This command must be run in a Next.js project")
            );
            process.exit(1);
          }
          const routePath = path.join(process.cwd(), "app", "api", "[transport]");
          yield fs.mkdir(routePath, { recursive: true });
          const routeFilePath = path.join(routePath, "route.ts");
          yield fs.writeFile(routeFilePath, ROUTE_TEMPLATE);
          console.log(chalk.green("\u2705 Successfully created MCP route handler!"));
          const packageManager = yield detectPackageManager();
          yield installDependencies(packageManager);
        } catch (error) {
          console.error(chalk.red("Error creating MCP route handler:"), error);
          process.exit(1);
        }
      });
    }
    program.name("mcp-handler").description("Initialize MCP route handler in your Next.js project").action(init);
    program.parse();
  }
});
var index = require_cli();

export { index as default };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.mjs.map